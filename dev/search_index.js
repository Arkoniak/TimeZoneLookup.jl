var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = TimeZoneLookup","category":"page"},{"location":"#TimeZoneLookup","page":"Home","title":"TimeZoneLookup","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [TimeZoneLookup]","category":"page"},{"location":"#Base.delete!-Union{Tuple{K}, Tuple{DataStructures.RBTree{K},K,Any}, Tuple{DataStructures.RBTree{K},K,Any,Any}} where K","page":"Home","title":"Base.delete!","text":"delete!(tree::RBTree, key, p, tol)\n\nDeletes key from tree, if present, else returns the unmodified tree.\n\n\n\n\n\n","category":"method"},{"location":"#Base.insert!-Union{Tuple{K}, Tuple{DataStructures.RBTree{K},K,V}, Tuple{DataStructures.RBTree{K},K,V,Any}} where K","page":"Home","title":"Base.insert!","text":"insert!(tree, key, p, tol = 1e-15)\n\nInserts key in the tree if it is not present.\n\n\n\n\n\n","category":"method"},{"location":"#DataStructures.insert_node!","page":"Home","title":"DataStructures.insert_node!","text":"insert_node!(tree::RBTree, node::RBTreeNode, p::V, tol = 1e-15)\n\nInserts node at proper location by traversing through the tree in a binary-search-tree fashion.\n\n\n\n\n\n","category":"function"}]
}
